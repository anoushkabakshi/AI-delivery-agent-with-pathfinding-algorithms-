"""
Map generator for creating test maps of different sizes and complexities.
"""

import random
from typing import List, Tuple
from grid import Grid

class MapGenerator:
    @staticmethod
    def create_small_map() -> Grid:
        """Create a small 5x5 test map."""
        grid = Grid(5, 5)
        
        # Add some obstacles
        grid.add_static_obstacle(1, 1)
        grid.add_static_obstacle(2, 2)
        grid.add_static_obstacle(3, 3)
        
        # Add terrain variations
        grid.set_terrain_cost(1, 0, 2)
        grid.set_terrain_cost(2, 1, 3)
        grid.set_terrain_cost(3, 2, 2)
        grid.set_terrain_cost(4, 3, 4)
        
        return grid
    
    @staticmethod
    def create_medium_map() -> Grid:
        """Create a medium 10x10 test map."""
        grid = Grid(10, 10)
        
        # Add obstacles in a pattern
        for i in range(2, 8, 2):
            grid.add_static_obstacle(i, i)
            grid.add_static_obstacle(i+1, i)
        
        # Add terrain variations
        for y in range(10):
            for x in range(10):
                if (x + y) % 3 == 0 and random.random() > 0.7:
                    grid.set_terrain_cost(x, y, random.randint(2, 4))
        
        return grid
    
    @staticmethod
    def create_large_map() -> Grid:
        """Create a large 15x15 test map."""
        grid = Grid(15, 15)
        
        # Create maze-like pattern
        for y in range(15):
            for x in range(15):
                if (x % 3 == 1 and y % 3 == 1) or (x % 4 == 0 and y % 4 == 0):
                    if random.random() > 0.3:  # 70% chance of obstacle
                        grid.add_static_obstacle(x, y)
        
        # Add terrain variations
        for y in range(15):
            for x in range(15):
                if not grid.is_obstacle(x, y):
                    # Higher costs towards edges
                    distance_from_center = abs(x-7) + abs(y-7)
                    if distance_from_center > 10:
                        grid.set_terrain_cost(x, y, 3)
                    elif distance_from_center > 5:
                        grid.set_terrain_cost(x, y, 2)
        
        return grid
    
    @staticmethod
    def create_dynamic_map() -> Grid:
        """Create a map designed for dynamic obstacle testing."""
        grid = Grid(8, 8)
        
        # Minimal static obstacles to allow movement
        grid.add_static_obstacle(3, 3)
        grid.add_static_obstacle(4, 4)
        
        # Mark positions for dynamic obstacles
        grid.set_terrain_cost(2, 2, 1)
        grid.set_terrain_cost(5, 5, 1)
        
        return grid
    
    @staticmethod
    def save_map_to_file(grid: Grid, filename: str):
        """Save a grid to a map file."""
        with open(filename, 'w') as f:
            for y in range(grid.height):
                row = []
                for x in range(grid.width):
                    if (x, y) == grid.start:
                        row.append('S')
                    elif (x, y) == grid.goal:
                        row.append('G')
                    elif grid.is_obstacle(x, y):
                        row.append('X')
                    else:
                        row.append(str(grid.get_cost(x, y)))
                f.write(','.join(row) + '\n')
        print(f"Map saved to {filename}")
    
    @staticmethod
    def generate_all_maps():
        """Generate all required test maps."""
        maps_dir = "maps"
        import os
        os.makedirs(maps_dir, exist_ok=True)
        
        print("üó∫Ô∏è Generating test maps...")
        
        # Small map
        small_map = MapGenerator.create_small_map()
        MapGenerator.save_map_to_file(small_map, f"{maps_dir}/small.map")
        
        # Medium map
        medium_map = MapGenerator.create_medium_map()
        MapGenerator.save_map_to_file(medium_map, f"{maps_dir}/medium.map")
        
        # Large map
        large_map = MapGenerator.create_large_map()
        MapGenerator.save_map_to_file(large_map, f"{maps_dir}/large.map")
        
        # Dynamic map
        dynamic_map = MapGenerator.create_dynamic_map()
        MapGenerator.save_map_to_file(dynamic_map, f"{maps_dir}/dynamic.map")
        
        print("‚úÖ All maps generated successfully!")
        
        return {
            'small': small_map,
            'medium': medium_map,
            'large': large_map,
            'dynamic': dynamic_map
        }


# Test map generation
if __name__ == "__main__":
    maps = MapGenerator.generate_all_maps()
    
    # Display each map
    from text_visualizer import TextVisualizer
    
    for name, grid in maps.items():
        print(f"\n{name.upper()} MAP:")
        visualizer = TextVisualizer(grid)
        visualizer.display_grid(grid.start, [], 0, f"{name} Map")
        input("Press Enter to continue...")
